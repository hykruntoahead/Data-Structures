大O描述的是--算法的运行时间和输入数据之间的关系（忽略常数）
   -->渐进时间复杂度（描叙n趋近于无穷的情况）
    addLast(e) --> O(1)              ~~~~|
    addFirst(e) --> O(n)                 |--->O(n)   resize --> O(n)
    add(index,e) --> O(n/2) = O(n)   ____|

    removeLast(e) --> O(1)              ~~~~|
    removeFirst(e) --> O(n)                 |--->O(n)
    remove(index,e) --> O(n/2) = O(n)   ____|

    set(index,e)---> O(1)

    get(index) ----> O(1)
    contains(e) ----> O(n)
    find(e) ----> O(n)

    resize ：
      平均，每次addLast操作，进行2次基本操作
      均摊计算addLast复杂度为O(1)--->均摊复杂度
      同理 removeLast均摊复杂度 ：O(1)

    复杂度震荡：
    同时分析addLast和removeLast操作--
        capacity = n 时重复多次 addLast(O_n) ;removeLast(O_n) 出现震荡
        出现问题原因：removeLast时resize过于着急(Eager)
        解决方案：Lazy
           当size == capacity/4时,将capacity减半

